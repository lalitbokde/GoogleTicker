@model CpaTicker.Areas.admin.Models.ConversionViewModel
@using CpaTicker.Areas.admin.Models

@{
    Layout = null;
}

<div class="row tspark">
    @Html.Partial("_Sparks")
</div>

<section id="widget-grid" class="">
    <div class="row">

        <!-- NEW WIDGET START -->
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">

            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-blueDark" id="wid-id-1" data-widget-togglebutton="false">

                <header>
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>Conversion Report <span id="filtertitle"></span></h2>
                    <div class="widget-toolbar">
                        <div class="jarviswidget-ctrls">
                            <a href="javascript:void(0);" class="txt-color-white" id="ropts" data-placement="bottom" title="" rel="tooltip" data-original-title="Report Options">
                                <i class="fa fa-cog"></i>
                            </a>
                        </div>
                    </div>
                </header>

                <!-- widget div-->
                <div>
                    <div class="dataTables_overlay"></div>
                    <div class="jarviswidget-editbox">
                        <div class="smart-form">

                            <div class="row">
                                <div class="fieldset">

                                    <section>
                                        <label class="label">Statistics:</label>
                                        <div class="inline-group">

                                            @Html.CheckBoxSmart("Status", "Status", Model.StatisticsEnum.HasFlag(StatisticsEnum.Status), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Status })
                                            @Html.CheckBoxSmart("Date", "Date", Model.StatisticsEnum.HasFlag(StatisticsEnum.Date), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Date })

                                            @Html.CheckBoxSmart("StatusDescription", "Status Description", Model.StatisticsEnum.HasFlag(StatisticsEnum.StatusDescription), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.StatusDescription })
                                            @Html.CheckBoxSmart("UserAgent", "UserAgent", Model.StatisticsEnum.HasFlag(StatisticsEnum.UserAgent), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.UserAgent })
                                            @Html.CheckBoxSmart("IP", "IP", Model.StatisticsEnum.HasFlag(StatisticsEnum.IP), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.IP })
                                            @Html.CheckBoxSmart("TransactionId", "TransactionId", Model.StatisticsEnum.HasFlag(StatisticsEnum.TransactionID), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.TransactionID })
                                            @Html.CheckBoxSmart("Type", "Type", Model.StatisticsEnum.HasFlag(StatisticsEnum.ConversionType), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.ConversionType })
                                            @Html.CheckBoxSmart("SubIds", "SubIds", Model.StatisticsEnum.HasFlag(StatisticsEnum.SubId), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.SubId })
                                            @Html.CheckBoxSmart("Action", "Action", Model.StatisticsEnum.HasFlag(StatisticsEnum.ActionName), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.ActionName })
                                            @Html.CheckBoxSmart("Pixel", "Pixel", Model.StatisticsEnum.HasFlag(StatisticsEnum.Pixel), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Pixel })
                                            @Html.CheckBoxSmart("Postback", "Postback", Model.StatisticsEnum.HasFlag(StatisticsEnum.Postback), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Postback })
                                            @Html.CheckBoxSmart("Campaign", "Campaign", Model.StatisticsEnum.HasFlag(StatisticsEnum.Campaign), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Campaign })
                                            @Html.CheckBoxSmart("Affiliate", "Affiliate", Model.StatisticsEnum.HasFlag(StatisticsEnum.Affiliate), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Affiliate })
                                            @Html.CheckBoxSmart("URLId", "URLId", Model.StatisticsEnum.HasFlag(StatisticsEnum.URLId), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.URLId })

                                            @Html.CheckBoxSmart("Referrer", "Referrer", Model.StatisticsEnum.HasFlag(StatisticsEnum.ParentURL), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.ParentURL })

                                            @Html.CheckBoxSmart("URL", "URL", Model.StatisticsEnum.HasFlag(StatisticsEnum.URL), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.URL })
                                            @Html.CheckBoxSmart("Source", "Source", Model.StatisticsEnum.HasFlag(StatisticsEnum.Source), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Source })
                                            @Html.CheckBoxSmart("Cost", "Cost", Model.StatisticsEnum.HasFlag(StatisticsEnum.Cost), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Cost })
                                            @Html.CheckBoxSmart("Revenue", "Revenue", Model.StatisticsEnum.HasFlag(StatisticsEnum.Revenue), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Revenue })
                                            @Html.CheckBoxSmart("Profit", "Profit", Model.StatisticsEnum.HasFlag(StatisticsEnum.Profit), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Profit })
                                            @Html.CheckBoxSmart("Country", "Country", Model.StatisticsEnum.HasFlag(StatisticsEnum.Country), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Country })


                                            @Html.CheckBoxSmart("DeviceId", "DeviceId", Model.StatisticsEnum.HasFlag(StatisticsEnum.DeviceId), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.DeviceId })
                                            @Html.CheckBoxSmart("IsSmartphone", "IsSmartphone", Model.StatisticsEnum.HasFlag(StatisticsEnum.IsSmartphone), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.IsSmartphone })
                                            @Html.CheckBoxSmart("IsiOS", "IsiOS", Model.StatisticsEnum.HasFlag(StatisticsEnum.IsiOS), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.IsiOS })
                                            @Html.CheckBoxSmart("IsAndroid", "IsAndroid", Model.StatisticsEnum.HasFlag(StatisticsEnum.IsAndroid), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.IsAndroid })
                                            @Html.CheckBoxSmart("OS", "OS", Model.StatisticsEnum.HasFlag(StatisticsEnum.OS), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.OS })
                                            @Html.CheckBoxSmart("Browser", "Browser", Model.StatisticsEnum.HasFlag(StatisticsEnum.Browser), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Browser })
                                            @Html.CheckBoxSmart("Device_os", "Device_os", Model.StatisticsEnum.HasFlag(StatisticsEnum.Device_os), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Device_os })
                                            @Html.CheckBoxSmart("Pointing_method", "Pointing_method", Model.StatisticsEnum.HasFlag(StatisticsEnum.Pointing_method), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Pointing_method })
                                            @Html.CheckBoxSmart("Is_tablet", "Is_tablet", Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_tablet), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Is_tablet })
                                            @Html.CheckBoxSmart("Model_name", "Model_name", Model.StatisticsEnum.HasFlag(StatisticsEnum.Model_name), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Model_name })
                                            @Html.CheckBoxSmart("Device_os_version", "Device_os_version", Model.StatisticsEnum.HasFlag(StatisticsEnum.Device_os_version), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Device_os_version })
                                            @Html.CheckBoxSmart("Is_wireless_device", "Is_wireless_device", Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_wireless_device), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Is_wireless_device })
                                            @Html.CheckBoxSmart("Brand_name", "Brand_name", Model.StatisticsEnum.HasFlag(StatisticsEnum.Brand_name), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Brand_name })
                                            @Html.CheckBoxSmart("Marketing_name", "Marketing_name", Model.StatisticsEnum.HasFlag(StatisticsEnum.Marketing_name), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Marketing_name })
                                            @Html.CheckBoxSmart("Resolution_height", "Resolution_height", Model.StatisticsEnum.HasFlag(StatisticsEnum.Resolution_height), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Resolution_height })
                                            @Html.CheckBoxSmart("Resolution_width", "Resolution_width", Model.StatisticsEnum.HasFlag(StatisticsEnum.Resolution_width), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Resolution_width })
                                            @Html.CheckBoxSmart("Canvas_support", "Canvas_support", Model.StatisticsEnum.HasFlag(StatisticsEnum.Canvas_support), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Canvas_support })
                                            @Html.CheckBoxSmart("Viewport_width", "Viewport_width", Model.StatisticsEnum.HasFlag(StatisticsEnum.Viewport_width), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Viewport_width })
                                            @Html.CheckBoxSmart("Isviewport_supported", "Isviewport_supported", Model.StatisticsEnum.HasFlag(StatisticsEnum.Isviewport_supported), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Isviewport_supported })
                                            @Html.CheckBoxSmart("Ismobileoptimized", "Ismobileoptimized", Model.StatisticsEnum.HasFlag(StatisticsEnum.Ismobileoptimized), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Ismobileoptimized })
                                            @Html.CheckBoxSmart("Ishandheldfriendly", "Ishandheldfriendly", Model.StatisticsEnum.HasFlag(StatisticsEnum.Ishandheldfriendly), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Ishandheldfriendly })
                                            @Html.CheckBoxSmart("Is_smarttv", "Is_smarttv", Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_smarttv), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Is_smarttv })
                                            @Html.CheckBoxSmart("Isux_full_desktop", "Isux_full_desktop", Model.StatisticsEnum.HasFlag(StatisticsEnum.Isux_full_desktop), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Isux_full_desktop })


                                        </div>
                                    </section>
                                    @Html.Partial("_Sound")
                                    @Html.Partial("_Filter")

                                    <section class="col-sm-6 col-md-6">
                                        <label class="label">TimeZone:</label>
                                        <label class="select">
                                            <i></i>
                                            @Html.DropDownList("rzone", new SelectList(@ViewBag.CustomTimeZone, "Value", "Text", ViewBag.TimeZone), new { @class = "select2" })
                                        </label>
                                    </section>

                                </div>
                            </div>

                        </div>
                    </div>

                    <!-- widget content -->
                    <div class="widget-body no-padding">

                        <div class="widget-body-toolbar clearfix">
                            @Html.Partial("_ViewData")
                        </div>


                        <table class="table table-striped rtable display wrap" id="rtable">
                            <thead>
                                <tr>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Date) ? "desktop" : "never")" data-class="desktop">Date</th>
                                    <th class="all">Status</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.StatusDescription)? "desktop" : "never")" data-class="desktop">Status Description</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Campaign)? "desktop" : "never")" data-class="desktop">Campaign</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Affiliate)? "desktop" : "never")" data-class="desktop">Affiliate</th>
                                    
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.ParentURL)? "min-tablet-p" : "never")" data-class="min-tablet-p">Referrer</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.URL)? "min-tablet-p" : "never")" data-class="min-tablet-p">URL</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.URLId)? "min-tablet-p" : "never")" data-class="min-tablet-p">URLId</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Source)? "desktop" : "never")" data-class="desktop">Source</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.UserAgent)? "desktop" : "never")" data-class="desktop">UserAgent</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IP)? "desktop" : "never")" data-class="desktop">IP</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Country)? "desktop" : "never")" data-class="desktop">Country</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.TransactionID)? "min-tablet-p" : "never")" data-class="min-tablet-p">TransactionId</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.ConversionType)? "all" : "never")" data-class="all">Type</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.SubId)? "all" : "never")" data-class="all">SubIds</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.ActionName)? "desktop" : "never")" data-class="desktop">Action</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Cost)? "min-tablet-l" : "never")" data-class="min-tablet-l">Cost</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Pixel)? "desktop" : "never")" data-class="desktop">Pixel</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Postback)? "desktop" : "never")" data-class="desktop">Postback</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Revenue)? "min-tablet-l" : "never")" data-class="min-tablet-l">Revenue</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Profit)? "desktop" : "never")" data-class="desktop">Profit</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.DeviceId)? "min-tablet-p" : "never")" data-class="min-tablet-p">DeviceId</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IsSmartphone)? "min-tablet-p" : "never")" data-class="min-tablet-p">IsSmartphone</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IsiOS)? "min-tablet-p" : "never")" data-class="min-tablet-p">IsiOS</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IsAndroid)? "min-tablet-p" : "never")" data-class="min-tablet-p">IsAndroid</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.OS)? "min-tablet-p" : "never")" data-class="min-tablet-p">OS</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Browser)? "min-tablet-p" : "never")" data-class="min-tablet-p">Browser</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Device_os)? "min-tablet-p" : "never")" data-class="min-tablet-p">Device_os</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Pointing_method)? "min-tablet-p" : "never")" data-class="min-tablet-p">Pointing_method</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_tablet)? "min-tablet-p" : "never")" data-class="min-tablet-p">Is_tablet</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Model_name)? "min-tablet-p" : "never")" data-class="min-tablet-p">Model_name</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Device_os_version)? "min-tablet-p" : "never")" data-class="min-tablet-p">Device_os_version</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_wireless_device)? "min-tablet-p" : "never")" data-class="min-tablet-p">Is_wireless_device</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Brand_name)? "min-tablet-p" : "never")" data-class="min-tablet-p">Brand_name</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Marketing_name)? "min-tablet-p" : "never")" data-class="min-tablet-p">Marketing_name</th>

                                    @*<td>Is_assign_phone_number</td>
                                        <td>Xhtmlmp_mime_type</td>
                                        <td>Xhtml_support_level</td>*@

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Resolution_height)? "min-tablet-p" : "never")" data-class="min-tablet-p">Resolution_height</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Resolution_width)? "min-tablet-p" : "never")" data-class="min-tablet-p">Resolution_width</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Canvas_support)? "min-tablet-p" : "never")" data-class="min-tablet-p">Canvas_support</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Viewport_width)? "min-tablet-p" : "never")" data-class="min-tablet-p">Viewport_width</th>

                                    @*<td>Html_preferred_dtd</td>*@

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Isviewport_supported)? "min-tablet-p" : "never")" data-class="min-tablet-p">Isviewport_supported</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Ismobileoptimized)? "min-tablet-p" : "never")" data-class="min-tablet-p">Ismobileoptimized</th>

                                    @*<td>Isimage_inlining</td>*@

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Ishandheldfriendly)? "min-tablet-p" : "never")" data-class="min-tablet-p">Ishandheldfriendly</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_smarttv)? "min-tablet-p" : "never")" data-class="min-tablet-p">Is_smarttv</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Isux_full_desktop)? "min-tablet-p" : "never")" data-class="min-tablet-p">Isux_full_desktop</th>


                                </tr>
                            </thead>
                            <tbody></tbody>

                            <tfoot>
                                <tr>
                                    <th>Date</th>
                                    <th>Status</th>

                                    <th>Status Description</th>
                                    <th>Campaign</th>
                                    <th>Affiliate</th>
                                    <th>URL</th>
                                    <th>URLId</th>
                                    <th>Source</th>
                                    <th>UserAgent</th>
                                    <th>IP</th>
                                    <th>Country</th>

                                    <th>TransactionId</th>
                                    <th>Type</th>
                                    <th>SubIds</th>
                                    <th>Action</th>
                                    <th>Cost</th>
                                    <th>Pixel</th>

                                    <th>Postback</th>
                                    <th>Revenue</th>
                                    <th>Profit</th>
                                    @*<th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.DeviceId)? "min-tablet-p" : "never")" data-class="min-tablet-p">DeviceId</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IsSmartphone)? "min-tablet-p" : "never")" data-class="min-tablet-p">IsSmartphone</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IsiOS)? "min-tablet-p" : "never")" data-class="min-tablet-p">IsiOS</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IsAndroid)? "min-tablet-p" : "never")" data-class="min-tablet-p">IsAndroid</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.OS)? "min-tablet-p" : "never")" data-class="min-tablet-p">OS</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Browser)? "min-tablet-p" : "never")" data-class="min-tablet-p">Browser</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Device_os)? "min-tablet-p" : "never")" data-class="min-tablet-p">Device_os</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Pointing_method)? "min-tablet-p" : "never")" data-class="min-tablet-p">Pointing_method</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_tablet)? "min-tablet-p" : "never")" data-class="min-tablet-p">Is_tablet</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Model_name)? "min-tablet-p" : "never")" data-class="min-tablet-p">Model_name</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Device_os_version)? "min-tablet-p" : "never")" data-class="min-tablet-p">Device_os_version</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_wireless_device)? "min-tablet-p" : "never")" data-class="min-tablet-p">Is_wireless_device</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Brand_name)? "min-tablet-p" : "never")" data-class="min-tablet-p">Brand_name</th>
                                        <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Marketing_name)? "min-tablet-p" : "never")" data-class="min-tablet-p">Marketing_name</th>*@

                                    @*<td>Is_assign_phone_number</td>
                                        <td>Xhtmlmp_mime_type</td>
                                        <td>Xhtml_support_level</td>*@

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Resolution_height)? "min-tablet-p" : "never")" data-class="min-tablet-p">Resolution_height</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Resolution_width)? "min-tablet-p" : "never")" data-class="min-tablet-p">Resolution_width</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Canvas_support)? "min-tablet-p" : "never")" data-class="min-tablet-p">Canvas_support</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Viewport_width)? "min-tablet-p" : "never")" data-class="min-tablet-p">Viewport_width</th>

                                    @*<td>Html_preferred_dtd</td>*@

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Isviewport_supported)? "min-tablet-p" : "never")" data-class="min-tablet-p">Isviewport_supported</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Ismobileoptimized)? "min-tablet-p" : "never")" data-class="min-tablet-p">Ismobileoptimized</th>

                                    @*<td>Isimage_inlining</td>*@

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Ishandheldfriendly)? "min-tablet-p" : "never")" data-class="min-tablet-p">Ishandheldfriendly</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Is_smarttv)? "min-tablet-p" : "never")" data-class="min-tablet-p">Is_smarttv</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Isux_full_desktop)? "min-tablet-p" : "never")" data-class="min-tablet-p">Isux_full_desktop</th>


                                </tr>


                            </tfoot>
                        </table>

                    </div>
                    <!-- end widget content -->

                </div>
                <!-- end widget div -->

            </div>
            <!-- end widget -->



        </article>
        <!-- WIDGET END -->

    </div>
</section>

<script type="text/javascript">

    // DO NOT REMOVE : GLOBAL FUNCTIONS!
    pageSetUp();

    // PAGE RELATED SCRIPTS
    updateBreadCrumb('Conversion Report');
    var table = null;
    loadDataTables();

    var getURL = function (url) {
        return url + '?timezone=' + encodeURIComponent($('#rzone').val()) +
                 '&viewdata=' + encodeURIComponent($('#selectedview').val()) +
                 '&fromdate=' + encodeURIComponent($('#fromdate').val()) +
                 '&todate=' + encodeURIComponent($('#todate').val()) +
                 '&dataview=' + getDataView() +
                getUrlFilterPart();
    };

    var getDataView = function () {

        var result = 0;

        $('.stat').filter(':checked').each(function () {
            result += $(this).data("value");
        });
        return result;

    };

    function runDataTables() {

        oldjson = null;
        compare = false;

        apiurl = '/api/reports/conversion';
        reporturl = '@Url.Action("conversion")';

        table = $('#rtable').DataTable({
            "ajax": {
                "url": getURL(apiurl),
                "dataSrc": ""

            },
            responsive: true,
            "iDisplayLength": 25,
            "aLengthMenu": [[25, 50, 100, 500, 1000, -1], [25, 50, 100, 500, 1000, "All"]],
            "deferRender": true,
            "autoWidth": false, // if true it doesn't get 100%
            "initComplete": function (settings, json) { // just called once
                oldjson = json;
                oldfilter = getUrlFilterPart();
                compare = true;

            },
            "order": [[0, "desc"]],
            "bFilter": false,
            "columns": [
                 {
                     data: null,
                     name: "Date",
                     render: function (data, type, full, meta) {
                         return $.format.date(data.Date, "MM/dd/yyyy HH:mm:ss a")
                         //var conversiondate = new Date(data.Date);
                         //return conversiondate.toLocaleString();
                     }
                 },
                {
                    data: null,
                    name: "Status",
                    render: function (data, type, full, meta) {
                        if (data.Status == 1) {
                            return 'Approved (<a id="' + data.ConversionId + '" href="#" class="togglestatus">Reject</a>)';
                        }
                        return 'Rejected (<a id="' + data.ConversionId + '" href="#" class="togglestatus">Approve</a>)';
                    }
                },

                {
                    data: "StatusDescription",
                    name: "StatusDescription"
                },
                {
                    data: null,
                    name: "Campaign",
                    render: function (data, type, full, meta) {
                        return '<a href="/admin/campaign/details/' + data.CampaignId + '">' + data.CampaignId + ' - ' + data.CampaignName + '</a>';
                    }
                },
                {
                    data: null,
                    name: "Affiliate",
                    render: function (data, type, full, meta) {
                        return '<a href="/admin/affiliate/details/' + data.AffiliateId + '">' + data.AffiliateId + ' - ' + data.Company + '</a>';
                    }
                },
                {
                    data: "Referrer",
                    name: "Referrer"
                },
                 {
                     data: "URL",
                     name: "URL"
                 },
                {
                    data: "URLId",
                    name: "URLId"
                },
                {
                    data: null,
                    name: "Source",
                    render: function (data, type, full, meta) {
                        if (data.Source === undefined) {
                            return '';
                        }
                        return '<div class="wordbreak">' + data.Source + '</div>';
                    }
                },
                {
                    data: "UserAgent",
                    name: "UserAgent",
                    render: function (data, type, full, meta) {
                        return '<div class="wordbreak">' + data + '</div>';
                    }
                },
                {
                    data: null,
                    name: "IP",
                    render: function (data, type, full, meta) {

                        if (data.IPAddress == null) {

                            return data.Postback_IPAddress;
                        }
                        if (data.Postback_IPAddress == null) {
                            return data.IPAddress;
                        }
                        if (data.IPAddress != data.Postback_IPAddress) {
                            return '<div>Pixel: ' + data.IPAddress + '</div>' +
                                   '<div>Postback: ' + data.Postback_IPAddress + '</div>';
                        }
                        return data.IPAddress;
                    }

                },
                {
                    data: null,
                    name: "Country",
                    render: function (data, type, full, meta) {
                        if (data.Country === undefined) {
                            return '';
                        }
                        return data.Country;
                    }
                },
                {
                    data: "TransactionId",
                    name: "TransactionId"
                },
                   {
                       data: "Type",
                       name: "Type"
                   },
                {
                    data: "SubIds",
                    name: "SubIds",
                    //render: function (data, type, full, meta) {
                    //    var result = '';

                    //    //$.each(data, function (index, subid) {
                    //    //    result += '<div class="wordbreak">SubId' + subid.SubIndex + ": " + subid.SubValue + "</div>"
                    //    //});

                    //    return result;
                    //}
                },
     {
         data: "Action",
         name: "Action"
     },
      {
          data: "Cost",
          name: "Cost",
          render: function (data, type, full, meta) {
              return '$' + data.toFixed(2);
          }
      },
      {
          data: null,
          name: "Pixel",
          render: function (data, type, full, meta) {
              return $.format.date(data.Pixel, "MM/dd/yyyy HH:mm:ss a")
              //var Pixeldate = new Date(data.Pixel);
              //return Pixeldate.toLocaleString();
          }
      },
                {
                    data: null,
                    name: "Postback",
                    render: function (data, type, full, meta) {
                        return $.format.date(data.Postback, "MM/dd/yyyy HH:mm:ss a")
                        //var Postbackdate = new Date(data.Postback);
                        //return Postbackdate.toLocaleString();
                    }
                },
                {
                    data: "Revenue",
                    name: "Revenue",
                    render: function (data, type, full, meta) {
                        return '$' + data.toFixed(2);
                    }
                },
                {
                    data: null,
                    name: "Profit",
                    render: function (data, type, full, meta) {
                        return '$' + (data.Revenue - data.Cost).toFixed(2);
                    }
                },
                  {
                      data: null,
                      name: "DeviceId",
                      render: function (data, type, full, meta) {
                          return data.DeviceId
                      }
                  },
                          {
                              data: null,
                              name: "IsSmartphone",
                              render: function (data, type, full, meta) {
                                  return data.IsSmartphone
                              }
                          },
                          {
                              data: null,
                              name: "IsiOS",
                              render: function (data, type, full, meta) {
                                  return data.IsiOS
                              }
                          },
                          {
                              data: null,
                              name: "IsAndroid",
                              render: function (data, type, full, meta) {
                                  return data.IsAndroid
                              }
                          },
                          {
                              data: null,
                              name: "OS",
                              render: function (data, type, full, meta) {
                                  return data.OS
                              }
                          },
                          {
                              data: null,
                              name: "Browser",
                              render: function (data, type, full, meta) {
                                  return data.Browser
                              }
                          },
                          {
                              data: null,
                              name: "Device_os",
                              render: function (data, type, full, meta) {
                                  return data.Device_os
                              }
                          },
                          {
                              data: null,
                              name: "Pointing_method",
                              render: function (data, type, full, meta) {
                                  return data.Pointing_method
                              }
                          },
                          {
                              data: null,
                              name: "Is_tablet",
                              render: function (data, type, full, meta) {
                                  return data.Is_tablet
                              }
                          },
                          {
                              data: null,
                              name: "Model_name",
                              render: function (data, type, full, meta) {
                                  return data.Model_name
                              }
                          },
                          {
                              data: null,
                              name: "Device_os_version",
                              render: function (data, type, full, meta) {
                                  return data.Device_os_version
                              }
                          },
                          {
                              data: null,
                              name: "Is_wireless_device",
                              render: function (data, type, full, meta) {
                                  return data.Is_wireless_device
                              }
                          },
                          {
                              data: null,
                              name: "Brand_name",
                              render: function (data, type, full, meta) {
                                  return data.Brand_name
                              }
                          },
                          {
                              data: null,
                              name: "Marketing_name",
                              render: function (data, type, full, meta) {
                                  return data.Marketing_name
                              }
                          },
                          //{
                          //    data: null,
                          //    name: "Is_assign_phone_number",
                          //    render: function (data, type, full, meta) {
                          //        return data.Is_assign_phone_number
                          //    }
                          //},
                          //{
                          //    data: null,
                          //    name: "Xhtmlmp_mime_type",
                          //    render: function (data, type, full, meta) {
                          //        return data.Xhtmlmp_mime_type
                          //    }
                          //},
                           //{
                           //    data: null,
                           //    name: "Xhtml_support_level",
                           //    render: function (data, type, full, meta) {
                           //        return data.Xhtml_support_level
                           //    }
                           //},
                              {
                                  data: null,
                                  name: "Resolution_height",
                                  render: function (data, type, full, meta) {
                                      return data.Resolution_height
                                  }
                              },
                                 {
                                     data: null,
                                     name: "Resolution_width",
                                     render: function (data, type, full, meta) {
                                         return data.Resolution_width
                                     }
                                 },
                                    {
                                        data: null,
                                        name: "Canvas_support",
                                        render: function (data, type, full, meta) {
                                            return data.Canvas_support
                                        }
                                    },
                                       {
                                           data: null,
                                           name: "Viewport_width",
                                           render: function (data, type, full, meta) {
                                               return data.Viewport_width
                                           }
                                       },
                                          //{
                                          //    data: null,
                                          //    name: "Html_preferred_dtd",
                                          //    render: function (data, type, full, meta) {
                                          //        return data.Html_preferred_dtd
                                          //    }
                                          //},
                                             {
                                                 data: null,
                                                 name: "Isviewport_supported",
                                                 render: function (data, type, full, meta) {
                                                     return data.Isviewport_supported
                                                 }
                                             },
                                                {
                                                    data: null,
                                                    name: "Ismobileoptimized",
                                                    render: function (data, type, full, meta) {
                                                        return data.Ismobileoptimized
                                                    }
                                                },

                                                 //{
                                                 //    data: null,
                                                 //    name: "Isimage_inlining",
                                                 //    render: function (data, type, full, meta) {
                                                 //        return data.Isimage_inlining
                                                 //    }
                                                 //},
                                                   {
                                                       data: null,
                                                       name: "Ishandheldfriendly",
                                                       render: function (data, type, full, meta) {
                                                           return data.Ishandheldfriendly
                                                       }
                                                   },
                                                     {
                                                         data: null,
                                                         name: "Is_smarttv",
                                                         render: function (data, type, full, meta) {
                                                             return data.Is_smarttv
                                                         }
                                                     },
                                                       {
                                                           data: null,
                                                           name: "Isux_full_desktop",
                                                           render: function (data, type, full, meta) {
                                                               return data.Isux_full_desktop
                                                           }
                                                       },
            ],
            "sDom": "t<'dt-toolbar-footer'<'col-xs-6'l><'col-xs-6'p>>",
            "footerCallback": function (row, data, start, end, display) {
                $('.dataTables_overlay').hide();
                oldjson = data;
                var api = this.api();
                if (data.length > 0) {
                    //if (end > start) {

                    var setfooter = function (name, formatter) {
                        // Total over all pages
                        total = api
                            .column(name + ':name')
                            .data()
                            .reduce(function (a, b) {
                                return a + b;
                            });

                        // Update footer
                        ftotal = total;
                        if (formatter) {
                            ftotal = formatter(total);
                        }
                        $(api.column(name + ':name').footer()).html(ftotal);

                        return total;
                    }

                    var priceformatter = function (val) {
                        return '$' + val.toFixed(2);
                    }

                    //var totalimpressions = setfooter("Impressions");
                    //var totalclicks = setfooter("Clicks");
                    //var totalconversions = setfooter("Conversions");
                    var totalcost = setfooter("Cost", priceformatter);
                    var totalrevenue = setfooter("Revenue", priceformatter);

                    //var cr = totalclicks == 0 ? (totalconversions * 100).toFixed(2) : ((totalconversions / totalclicks) * 100).toFixed(2);
                    //var cpc = totalclicks == 0 ? (totalcost * 100).toFixed(2) : ((totalcost / totalclicks) * 100).toFixed(2);
                    //var rpc = totalclicks == 0 ? (totalconversions * 100).toFixed(2) : ((totalrevenue / totalclicks) * 100).toFixed(2);
                    var pf = (totalrevenue - totalcost).toFixed(2);

                    //// set conversion rate
                    //$(api.column('CR:name').footer()).html(cr + '%');
                    //$(api.column('CPC:name').footer()).html('$' + cpc);
                    $(api.column('Profit:name').footer()).html('$' + pf);
                    //$(api.column('RPC:name').footer()).html('$' + rpc);
                }
                else {

                    // clear all tfoot
                    api.columns().eq(0).each(function (idx) {
                        var column = api.column(idx);
                        var name = $(column.header()).html();

                        if (idx == 0)
                        { $(column.footer()).html("Totals"); }
                        else { $(column.footer()).html(""); }
                    });
                }
            }

        });


        $('#run').click(function (e) {
            //e.preventDefault();
            //window.location.hash = getURL(reporturl);
            $('.dataTables_overlay').show();
            refreshTable();
        });
        $("#rzone").change(function (e) {
            e.preventDefault();
            window.location.hash = getURL(reporturl);
        });
        $('#export').click(function (e) {
            e.preventDefault();
            window.location = getURL(reporturl) + '&state=1';
        });

        $('.togglerefresh').change(function () {
            $('.dataTables_overlay').show();
            refreshTable(this.name);
        });

        $('.toggle').change(function () {
            debugger;
            updateHash(getURL(reporturl));
            toggleColumn(this.name);
        });

        $('#rtable').on('click', '.togglestatus', function (e) {

            e.preventDefault();
            $this = $(this);
            var status = $this.text() == 'Approve' ? 0 : 1;

            var conversion_id = $this.attr('id');

            if (status == 0) {
                var msg = 'Are you sure you want to approve this Conversion?';
            } else {
                var msg = 'Are you sure you want to reject this Conversion?';
            }
            if (confirm(msg)) {
                $('.dataTables_overlay').show();
                var url = '@Url.Action("statuschange", "helper")?status=' + status + '&conversionid=' + conversion_id;

                $.get(url, function (data) {
                    refreshTable();
                });
            }

            return false;
        });

        //setReportTimer();

    }

</script>

