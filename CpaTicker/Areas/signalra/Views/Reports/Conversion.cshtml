@model CpaTicker.Areas.admin.Models.ConversionViewModel
@using CpaTicker.Areas.admin.Models

@{
    Layout = null;
}

<div class="row tspark">
    <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4">
        <h1 class="page-title txt-color-blueDark">
            <i class="fa fa-fw fa-table"></i>
            Conversion Report
        </h1>
    </div>
	@Html.Partial("_Sparks")
</div>

<section id="widget-grid" class="">
    <div class="row">

         <!-- NEW WIDGET START -->
		<article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">

			<!-- Widget ID (each widget will need unique ID)-->
			<div class="jarviswidget jarviswidget-color-blueDark" id="wid-id-1" data-widget-togglebutton="false">
		
				<header>
					<span class="widget-icon"> <i class="fa fa-table"></i> </span>
					<h2>Conversion Report <span id="filtertitle"></span></h2>
                    <div class="widget-toolbar"> 
                        <div class="jarviswidget-ctrls">
                            <a href="javascript:void(0);" class="txt-color-white" id="ropts" data-placement="bottom" title="" rel="tooltip" data-original-title="Report Options">
                                <i class="fa fa-cog"></i>
                            </a>
                        </div>
                    </div>
				</header>

				<!-- widget div-->
				<div>

                    <div class="jarviswidget-editbox">
                        <div class="smart-form">
						    
							<div class="row">
                                <div class="fieldset">

                                    <section>
                                        <label class="label">Statistics:</label>
                                        <div class="inline-group">
                                           
                                            @Html.CheckBoxSmart("Status", "Status", Model.StatisticsEnum.HasFlag(StatisticsEnum.Status), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Status })
                                            @Html.CheckBoxSmart("Date", "Date", Model.StatisticsEnum.HasFlag(StatisticsEnum.Date), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Date })

                                            @Html.CheckBoxSmart("StatusDescription", "Status Description", Model.StatisticsEnum.HasFlag(StatisticsEnum.StatusDescription), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.StatusDescription })
                                            @Html.CheckBoxSmart("UserAgent", "UserAgent", Model.StatisticsEnum.HasFlag(StatisticsEnum.UserAgent), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.UserAgent })
                                            @Html.CheckBoxSmart("IP", "IP", Model.StatisticsEnum.HasFlag(StatisticsEnum.IP), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.IP })
                                            @Html.CheckBoxSmart("TransactionId", "TransactionId", Model.StatisticsEnum.HasFlag(StatisticsEnum.TransactionID), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.TransactionID })
                                            @Html.CheckBoxSmart("Type", "Type", Model.StatisticsEnum.HasFlag(StatisticsEnum.ConversionType), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.ConversionType })
                                            @Html.CheckBoxSmart("SubIds", "SubIds", Model.StatisticsEnum.HasFlag(StatisticsEnum.SubId), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.SubId })
                                            @Html.CheckBoxSmart("Action", "Action", Model.StatisticsEnum.HasFlag(StatisticsEnum.ActionName), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.ActionName })
                                            @Html.CheckBoxSmart("Pixel", "Pixel", Model.StatisticsEnum.HasFlag(StatisticsEnum.Pixel), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Pixel })
                                            @Html.CheckBoxSmart("Postback", "Postback", Model.StatisticsEnum.HasFlag(StatisticsEnum.Postback), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Postback })
                                            @Html.CheckBoxSmart("Campaign", "Campaign", Model.StatisticsEnum.HasFlag(StatisticsEnum.Campaign), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Campaign })
                                            @Html.CheckBoxSmart("Affiliate", "Affiliate", Model.StatisticsEnum.HasFlag(StatisticsEnum.Affiliate), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Affiliate })
                                            @Html.CheckBoxSmart("URLId", "URLId", Model.StatisticsEnum.HasFlag(StatisticsEnum.URLId), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.URLId })
                                            @Html.CheckBoxSmart("URL", "URL", Model.StatisticsEnum.HasFlag(StatisticsEnum.URL), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.URL })
                                            @Html.CheckBoxSmart("Source", "Source", Model.StatisticsEnum.HasFlag(StatisticsEnum.Source), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Source })
                                            @Html.CheckBoxSmart("Cost", "Cost", Model.StatisticsEnum.HasFlag(StatisticsEnum.Cost), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Cost })
                                            @Html.CheckBoxSmart("Revenue", "Revenue", Model.StatisticsEnum.HasFlag(StatisticsEnum.Revenue), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Revenue })
                                            @Html.CheckBoxSmart("Profit", "Profit", Model.StatisticsEnum.HasFlag(StatisticsEnum.Profit), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Profit })
                                            @Html.CheckBoxSmart("Country", "Country", Model.StatisticsEnum.HasFlag(StatisticsEnum.Country), new { @class = "toggle stat", @data_value = (long)StatisticsEnum.Country })

                                        </div>
                                    </section>
                                    @Html.Partial("_Sound")
                                    @Html.Partial("_Filter")

                                    <section class="col-sm-6 col-md-6">
                                        <label class="label">TimeZone:</label>
                                        <label class="select">
                                            <i></i>
                                            @Html.DropDownList("rzone", new SelectList(TimeZoneInfo.GetSystemTimeZones(), "Id", "DisplayName", ViewBag.TimeZone))
                                        </label>
                                    </section>

                                </div>
							</div>
                           
                        </div>
                    </div>

					<!-- widget content -->
					<div class="widget-body no-padding">
                        
                       <div class="widget-body-toolbar clearfix">
                           @Html.Partial("_ViewData")
                        </div>


                        <table class="table table-striped rtable display wrap" id="rtable">
                            <thead>
                                <tr>
                                    
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Date) ? "desktop" : "desktop")" data-class="desktop">Date</th>
                                    <th class="all">Status</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.StatusDescription)? "desktop" : "never")" data-class="desktop">Status Description</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Campaign)? "desktop" : "never")" data-class="desktop">Campaign</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Affiliate)? "desktop" : "never")" data-class="desktop">Affiliate</th>

                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.URL)? "min-tablet-p" : "never")" data-class="min-tablet-p">URL</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.URLId)? "min-tablet-p" : "never")" data-class="min-tablet-p">URLId</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Source)? "desktop" : "never")" data-class="desktop">Source</th>
                                    
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.UserAgent)? "desktop" : "never")" data-class="desktop">UserAgent</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.IP)? "desktop" : "never")" data-class="desktop">IP</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Country)? "desktop" : "never")" data-class="desktop">Country</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.TransactionID)? "min-tablet-p" : "never")" data-class="min-tablet-p">TransactionId</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.ConversionType)? "all" : "never")" data-class="all">Type</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.SubId)? "all" : "never")" data-class="all">SubIds</th>
                                    
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.ActionName)? "desktop" : "never")" data-class="desktop">Action</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Cost)? "min-tablet-l" : "never")" data-class="min-tablet-l">Cost</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Pixel)? "desktop" : "never")" data-class="desktop">Pixel</th>
                                    
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Postback)? "desktop" : "never")" data-class="desktop">Postback</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Revenue)? "min-tablet-l" : "never")" data-class="min-tablet-l">Revenue</th>
                                    <th class="@(Model.StatisticsEnum.HasFlag(StatisticsEnum.Profit)? "desktop" : "never")" data-class="desktop">Profit</th>
                                </tr>
                            </thead>
                            <tbody>
                                
                            </tbody>
                            
                            <tfoot>
                                <tr>
                                    <th>Date</th>
                                    <th>Status</th>
                                   
                                    <th>Status Description</th>
                                    <th>Campaign</th>
                                    <th>Affiliate</th>

                                    <th>URL</th>
                                    <th>URLId</th>
                                    <th>Source</th>
                                    <th>UserAgent</th>
                                    <th>IP</th>
                                    <th>Country</th>

                                    <th>TransactionId</th>
                                    <th>Type</th>
                                    <th>SubIds</th>

                                    <th>Action</th>
                                    <th>Cost</th>
                                    <th>Pixel</th>
                                    
                                    <th>Postback</th>
                                    <th>Revenue</th>
                                    <th>Profit</th>
                                </tr>


                            </tfoot>
                        </table>
						    
					</div>
					<!-- end widget content -->

				</div>
				<!-- end widget div -->

			</div>
			<!-- end widget -->

			

		</article>
		<!-- WIDGET END -->

    </div>
</section>

<script type="text/javascript">

    // DO NOT REMOVE : GLOBAL FUNCTIONS!
    pageSetUp();
    var LocalCheck = localStorage.getItem('hourlyreprt');
    if (LocalCheck == "0") {
        //NotifyHourly();

        //$.ajax({
        //    type: "POST",
        //    url: "/SignalRNotify/NotifyHourlyReport",
        //    data: "{timezone:'" + $('#rzone').val() + "',viewdata:'" + $('#selectedview').val() + "',fromdate:'" + $('#fromdate').val() + "',todate:'" + $('#todate').val() + "',dataview:'testing'}",
        //    contentType: "application/json; charset=utf-8",
        //    dataType: "json",
        //    success: function (data) {
        //    }
        //});
        localStorage.setItem('hourlyreprt', '1');
    }
    // PAGE RELATED SCRIPTS
    updateBreadCrumb('Conversion Report');
    var table = null;
    loadDataTables();

    var getURL = function (url) {
        return url + '?timezone=' + encodeURIComponent($('#rzone').val()) +
                 '&viewdata=' + encodeURIComponent($('#selectedview').val()) +
                 '&fromdate=' + encodeURIComponent($('#fromdate').val()) +
                 '&todate=' + encodeURIComponent($('#todate').val()) +
                 '&dataview=' + getDataView() + 
                getUrlFilterPart();
    };

    var getDataView = function () {

        var result = 0;

        $('.stat').filter(':checked').each(function () {
            result += $(this).data("value");
        });
        return result;

    };

    function runDataTables() {

        oldjson = null;
        compare = false;

        apiurl = '/api/reports/conversion';
        reporturl = '@Url.Action("conversion")';

        table = $('#rtable').DataTable({
            "ajax": {
                "url": getURL(apiurl),
                "dataSrc": ""

            },
            responsive: true,
            "iDisplayLength": 25,
            "aLengthMenu": [[25, 50, 100, 500, 1000, -1], [25, 50, 100, 500, 1000, "All"]],
            "deferRender": true,
            "autoWidth": false, // if true it doesn't get 100%
            "initComplete": function (settings, json) { // just called once
                oldjson = json;
                oldfilter = getUrlFilterPart();
                compare = true;

            },
            "order":[[0,"desc"]],
            "bFilter": false,
            "columns": [
                 {
                     data: "Date",
                     name: "Date"
                 },
                {
                    data: null,
                    name: "Status",
                    render: function (data, type, full, meta) {
                        if (data.Status == 1) {
                            return 'Approved (<a id="' + data.ConversionId + '" href="#" class="togglestatus">Reject</a>)';
                        }
                        return 'Rejected (<a id="' + data.ConversionId + '" href="#" class="togglestatus">Approve</a>)';
                    }
                },
               
                {
                    data: "StatusDescription",
                    name: "StatusDescription"
                },
                {
                    data: null,
                    name: "Campaign",
                    render: function (data, type, full, meta) {
                        return '<a href="/admin/campaign/details/' + data.CampaignId + '">' + data.CampaignId + ' - ' + data.CampaignName + '</a>';
                    }
                },
                {
                    data: null,
                    name: "Affiliate",
                    render: function (data, type, full, meta) {
                        return '<a href="/admin/affiliate/details/' + data.AffiliateId + '">' + data.AffiliateId + ' - ' + data.Company + '</a>';
                    }
                },
                {
                    data: "URL",
                    name: "URL"                    
                },
                {
                    data: "URLId",
                    name: "URLId"
                },
                {
                    data: null,
                    name: "Source",
                    render: function (data, type, full, meta) {
                        if (data.Source === undefined) {
                            return '';
                        }
                        return '<div class="wordbreak">' + data.Source + '</div>';
                    }
                },
                {
                    data: "UserAgent",
                    name: "UserAgent",
                    render: function (data, type, full, meta) {
                        return '<div class="wordbreak">' + data + '</div>';
                    }
                },
                {
                    data: null,
                    name: "IP",
                    render: function (data, type, full, meta) {
                        
                        if (data.IPAddress == null) {
                            
                            return data.Postback_IPAddress;
                        }
                        if (data.Postback_IPAddress == null) {
                            return data.IPAddress;
                        }
                        if (data.IPAddress != data.Postback_IPAddress) {
                            return '<div>Pixel: ' + data.IPAddress + '</div>' +
                                   '<div>Postback: ' + data.Postback_IPAddress + '</div>';
                        }
                        return data.IPAddress;
                    }

                },
                {
                    data: null,
                    name: "Country",
                    render: function (data, type, full, meta) {
                        if (data.Country === undefined) {
                            return '';
                        }
                        return data.Country;
                    }
                },
                {
                    data: "TransactionId",
                    name: "TransactionId"                    
                },
                {
                    data: "Type",
                    name: "Type"                    
                },
                {
                    data: "SubIds",
                    name: "SubIds",
                    render: function (data, type, full, meta) {
                        var result = '';

                        $.each(data, function (index, subid) {
                            result += '<div class="wordbreak">SubId' + subid.SubIndex + ": " + subid.SubValue + "</div>"
                        });

                        return result;
                    }
                },
                {
                    data: "Action", 
                    name: "Action"
                },
                {
                    data: "Cost",
                    name: "Cost",
                    render: function (data, type, full, meta) {
                        return '$' + data.toFixed(2);
                    }
                },
                {
                    data: "Pixel",
                    name: "Pixel"                    
                },                
                {
                    data: "Postback",
                    name: "Postback"                   
                },
                {
                    data: "Revenue",
                    name: "Revenue",
                    render: function (data, type, full, meta) {
                        return '$' + data.toFixed(2);
                    }
                },
                {
                    data: null,
                    name: "Profit",
                    render: function (data, type, full, meta) {
                        return '$' + (data.Revenue - data.Cost).toFixed(2);
                    }
                }


            ],
            "sDom": "t<'dt-toolbar-footer'<'col-xs-6'l><'col-xs-6'p>>",
            "footerCallback": function (row, data, start, end, display) {

                var api = this.api();
                if (data.length > 0) {
                    //if (end > start) {

                    var setfooter = function (name, formatter) {
                        // Total over all pages
                        total = api
                            .column(name + ':name')
                            .data()
                            .reduce(function (a, b) {
                                return a + b;
                            });

                        // Update footer
                        ftotal = total;
                        if (formatter) {
                            ftotal = formatter(total);
                        }
                        $(api.column(name + ':name').footer()).html(ftotal);

                        return total;
                    }

                    var priceformatter = function (val) {
                        return '$' + val.toFixed(2);
                    }

                    //var totalimpressions = setfooter("Impressions");
                    //var totalclicks = setfooter("Clicks");
                    //var totalconversions = setfooter("Conversions");
                    var totalcost = setfooter("Cost", priceformatter);
                    var totalrevenue = setfooter("Revenue", priceformatter);

                    //var cr = totalclicks == 0 ? (totalconversions * 100).toFixed(2) : ((totalconversions / totalclicks) * 100).toFixed(2);
                    //var cpc = totalclicks == 0 ? (totalcost * 100).toFixed(2) : ((totalcost / totalclicks) * 100).toFixed(2);
                    //var rpc = totalclicks == 0 ? (totalconversions * 100).toFixed(2) : ((totalrevenue / totalclicks) * 100).toFixed(2);
                    var pf = (totalrevenue - totalcost).toFixed(2);

                    //// set conversion rate
                    //$(api.column('CR:name').footer()).html(cr + '%');
                    //$(api.column('CPC:name').footer()).html('$' + cpc);
                    $(api.column('Profit:name').footer()).html('$' + pf);
                    //$(api.column('RPC:name').footer()).html('$' + rpc);
                }
                else {

                    // clear all tfoot
                    api.columns().eq(0).each(function (idx) {
                        var column = api.column(idx);
                        var name = $(column.header()).html();

                        if (idx == 0)
                        { $(column.footer()).html("Totals"); }
                        else { $(column.footer()).html(""); }
                    });
                }
            }

        });


        $('#run').click(function (e) {
            e.preventDefault();
            window.location.hash = getURL(reporturl);
        });

        $('#export').click(function (e) {
            e.preventDefault();
            window.location = getURL(reporturl) + '&state=1';
        });

        $('.togglerefresh').change(function () {
            refreshTable(this.name);
        });

        $('.toggle').change(function () {
            updateHash(getURL(reporturl));
            toggleColumn(this.name);
        });

        $('#rtable').on('click', '.togglestatus', function (e) {

            e.preventDefault();
            $this = $(this);
            var status = $this.text() == 'Approve' ? 0 : 1;

            var conversion_id = $this.attr('id');

            if (status == 0) {
                var msg = 'Are you sure you want to approve this Conversion?';
            } else {
                var msg = 'Are you sure you want to reject this Conversion?';
            }
            if (confirm(msg)) {
                var url = '@Url.Action("statuschange", "helper")?status=' + status + '&conversionid=' + conversion_id;

                $.get(url, function (data) {
                    refreshTable();
                });
            }

            return false;
        });

        //setReportTimer();

    }

</script>


