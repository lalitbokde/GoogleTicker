@model CpaTicker.Areas.admin.Classes.OverridePayout

@{
    ViewBag.Title = "Edit Affiliate Payouts";
    ViewBag.hash = Url.Action("index", new { id = ViewContext.RouteData.Values["id"] });
}

<div class="row tspark">
    <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4">
        <h1 class="page-title txt-color-blueDark">
            <i class="fa fa-bar-chart-o fa-fw "></i>
            @Html.ActionLink("Actions", "index", new { id = ViewContext.RouteData.Values["id"] })
            <span>
                >               
            </span>
            @Html.ActionLink("Affiliate Payouts", "OverridePayout", new { id = ViewContext.RouteData.Values["id"] })
            <span>
                >
                Edit
            </span>
        </h1>
    </div>
    @Html.Partial("_Sparks")
</div>

<section id="widget-grid" class="">

    <!-- START ROW -->

    <div class="row">

        <!-- NEW COL START -->
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">

            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget" id="wid-id-1" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-deletebutton="false">

                <header>
                    <span class="widget-icon"> <i class="fa fa-plus"></i> </span>
                    <h2>Edit Affiliate Payouts for Action <strong>@ViewBag.Action.Id</strong></h2>
                </header>

                <!-- widget div-->
                <div>

                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->

                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body no-padding">

                        @*@using (Html.BeginForm("overridepayoutcreate", "action", FormMethod.Post, new { @id = "createaction", @class = "smart-form" }))
                            {*@
                        @*@Html.AntiForgeryToken()*@

                        <form id="editoverride" class="smart-form">
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.ActionID, new { @Value = ViewBag.Action.Id })
                            @Html.HiddenFor(model => model.OverridID, new { @Value = ViewBag.OverridID })

                            <footer>
                                <nav>
                                    <button class="btn btn-primary" type="button" id="btneditoverride"><i class="fa fa-check"></i> Edit Affiliate Payouts</button>
                                    @Html.ActionLink("Back", "OverridePayout", new { id = ViewBag.Action.Id }, new { @class = "btn btn-default", @id = "back_button" })
                                </nav>
                            </footer>

                            <div class="fieldset">

                                <div class="row">



                                    <section class="col col-6">
                                        @Html.LabelFor(model => model.AffiliateID,"Affiliate", new { @class = "label" })
                                        <label class="select">
                                            @Html.DropDownList("AffiliateID")
                                            <i></i>
                                        </label>
                                    </section>

                                </div>



                            </div>

                            <fieldset>
                                <legend>Payout</legend>
                                <div class="row">
                                    <section class="col col-6">
                                        @Html.LabelFor(model => model.PayoutType,"Payout Type", new { @class = "label", @placeholder = "0.00" })
                                        <label class="select">
                                            <select id="PayoutType">
                                                <option value="CPA">Payout Per Conversion (CPA)</option>
                                                <option value="CPS">Payout Per Sale (CPS)</option>
                                                <option value="CPA_CPS">Payout Per Conversion + Payout Per Sale (CPA + CPS)</option>
                                                @*<option value="CPC">Payout Per Click (CPC)</option>
                                                <option value="CPM">Payout Per Thousand Impressions (CPM)</option>*@
                                            </select>
                                            @*@Html.EnumDropDownListFor(model => model.PayoutType)*@
                                            <i></i>
                                        </label>
                                    </section>
                                    <section class="col col-3" id="cmoney">
                                        @Html.LabelFor(model => model.Payout, new { @class = "label", id = "clabel" })
                                        <label class="input">
                                            <i class="icon-append fa fa-money"></i>
                                            @Html.TextBoxFor(model => model.Payout, new { @placeholder = "$ 0.00" })
                                        </label>
                                        @Html.ValidationMessageFor(model => model.Payout)
                                        <div class="note" id="cmnote">The amount paid to affiliates per conversion.</div>
                                    </section>
                                    <section class="col col-3" id="cpercent">
                                        @Html.LabelFor(model => model.PayoutPercent, new { @class = "label" })
                                        <label class="input">
                                            <i class="icon-append fa fa-money"></i>
                                            @Html.TextBoxFor(model => model.PayoutPercent, new { @placeholder = "0.0 %" })
                                        </label>
                                        @Html.ValidationMessageFor(model => model.PayoutPercent)
                                        <div class="note" id="cpnote">The percentage of sale per conversion paid to affiliates.</div>
                                    </section>
                                </div>
                            </fieldset>
                        </form>
                        @*}*@

                    </div>
                    <!-- end widget content -->

                </div>
                <!-- end widget div -->

            </div>
            <!-- end widget -->

        </article>
        <!-- END COL -->

    </div>

    <!-- END ROW -->

</section>
<link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/ui-lightness/jquery-ui.css" />
<link href="~/Content/NewTheme/Multicolumn/jquery.multiselect.css" rel="stylesheet" />
<script src="~/Content/NewTheme/Multicolumn/jquery.multiselect.js"></script>
<script src="~/Content/NewTheme/Multicolumn/prettify.js"></script>
<script type="text/javascript">
    // DO NOT REMOVE : GLOBAL FUNCTIONS!
    pageSetUp();

    // PAGE RELATED SCRIPTS
    updateBreadCrumb('Action/EditOverridePayout');
   // updateBreadCrumb('OverridePayout');
    container = $('#content');
    $.validator.unobtrusive.parse(container);

    $('#submit_button').click(function (e) {
        e.preventDefault();
        var f = this.form;
        //container = $('#content');
        //$.validator.unobtrusive.parse($(f)); // this may be placed better! OJO
        if ($(f).valid()) {
            pajaxSubmit(f, container, '@ViewBag.hash');
        }
        return false; // keeps the page from not refreshing
    });


    $('#PayoutType').change(function () {
        Payout(this.value);
    });

    $("#PayoutType").val('@ViewBag.DDLPayout')

    $("#btneditoverride").click(function () {
        
        if (CheckValidation()) {
            $.ajax({
                type: "POST",
                // url: "/Action/AddOverridePayout",
                url: '@Url.Action("UpdateOverridePayout", "Action", new { area = "Signalra" })',
                // data: Formsdata.serialize(),
                data: "{OverridID:'" + $("#OverridID").val() + "',ActionID:'" + $("#ActionID").val() + "',AffiliateID:'" + $("#AffiliateID").val() + "',PayoutType:'" + $("#PayoutType").val() + "',Payout:'" + $("#Payout").val() + "',PayoutPercent:'" + $("#PayoutPercent").val() + "'}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    window.location.href = "../signalra#/signalra/action/overridepayout/" + data;
                }
            });
        }
    });

    function CheckValidation() {
        
        var flag1 = true;
        var flag2 = true;
        var ptype = $("#PayoutType").val();
        var pout = $("#Payout").val();
        var ppercent = $("#PayoutPercent").val();
        if (ptype == "CPS" || ptype == "CPA_CPS") {
            if (ppercent == "") { $("#PayoutPercent").css("border", "1px solid red"); flag1 = false; }
            if (pout == "" && ptype == "CPA_CPS") { $("#Payout").css("border", "1px solid red"); flag2 = false; }
        }
        else {
            if (pout == "") { $("#Payout").css("border", "1px solid red"); flag2 = false; }
        }

        if (flag1 == true && flag2 == true)
        { return true; }
        else
        { return false; }
    }

    //$('#RevenueType').change(function () {
    //    Revenue(this.value);
    //});

    Payout($('#PayoutType').val());
    function Payout(valueSelected) {
        switch (valueSelected) {
            case "CPA":
                $('#cmoney').show();
                $('#cpercent').hide();
                $("#cmnote").text("The amount paid to affiliates per conversion.");
                $("#clabel").text("Payout Per Conversion");
                break;
            case "CPS":
                $('#cmoney').hide();
                $('#cpercent').show();
                $("#cmnote").text("The amount paid to affiliates per conversion.");
                $("#clabel").text("Payout per Conversion");
                break;
            case "CPA_CPS":
                $('#cmoney').show();
                $('#cpercent').show();
                $("#cmnote").text("The amount paid to affiliates per conversion.");
                $("#clabel").text("Payout per Conversion");
                break;
            case "CPC":
                $('#cmoney').show();
                $('#cpercent').hide();
                $("#cmnote").text("The amount paid to affiliates per click.");
                $("#clabel").text("Payout per Click");
                break;
            default: // CPM
                $('#cmoney').show();
                $('#cpercent').hide();
                $("#cmnote").text("The amount paid to affiliates per thousand impressions.");
                $("#clabel").text("Payout per Thousand Impressions");
                break;
        }
    }

    /******************** Custom Validation ***************************/

    jQuery.validator.addMethod('requirediftype', function (value, element, params) {
        var propertyId = $(element).attr('data-val-requirediftype-property');
        //get the element by id
        var ddlValue = $('#' + propertyId).first().val();
        var expected = $(element).attr('data-val-requirediftype-expected');

        if (propertyId == "PayoutType") {
            if (ddlValue == 'CPS' || ddlValue == 'CPA_CPS') {
                return value; // return if value has data
            }
            return true;
        }
        else {
            if (ddlValue == 'RPS' || ddlValue == 'RPA_RPS') {
                return value; // return if value has data
            }
            return true;
        }

    }, '');

    jQuery.validator.unobtrusive.adapters.add('requirediftype', {}, function (options) {
        options.rules['requirediftype'] = true;
        options.messages['requirediftype'] = options.message;
    });

    jQuery.validator.addMethod('requiredifnot', function (value, element, params) {
        var propertyId = $(element).attr('data-val-requiredifnot-property');
        //get the element by id
        var ddlValue = $('#' + propertyId).first().val();
        var expected = $(element).attr('data-val-requiredifnot-expected');

        if (ddlValue !== expected) {
            return value; // if value is empty or null then must return false
        }

        return true;

    }, '');

    jQuery.validator.unobtrusive.adapters.add('requiredifnot', {}, function (options) {
        options.rules['requiredifnot'] = true;
        options.messages['requiredifnot'] = options.message;
    });

    /******************** Custom Validation ***************************/

</script>